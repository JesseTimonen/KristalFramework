<?php namespace Backend\Core;
defined("ACCESS") or exit("Access Denied");

use Backend\Controllers\FormRequests;
use Backend\Core\Helper\Actions\FrameworkHelper;
use Backend\Core\PHPJS;
use voku\helper\HtmlMin;


class Router
{
    private $rendered_view;


    protected function __construct()
    {
        $this->rendered_view = ""; 

        // Init form requests
        if (class_exists("Backend\Controllers\FormRequests"))
        {
            new FormRequests();
        }

        // Init Framework helper
        if (DISPLAY_HELPER && MAINTENANCE_MODE && $_SESSION["maintenance_access_granted"])
        {
            if (class_exists("Backend\Core\Helper\Actions\FrameworkHelper"))
            {
                new FrameworkHelper();
            }
        }

        // Parse route from url
        $this->getURLRequest();
    }


    private function getURLRequest()
    {
        // Parse page name and variables from the URL
        $root_url = str_replace("index.php", "", $_SERVER["PHP_SELF"]);
        $url = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
        $url = substr($url, strlen($root_url));
        $url = explode("/", $url);
        $page = strtolower($url[0]);
        unset($url[0]);

        // Sanitize the page variable
        $page = htmlspecialchars($page, ENT_QUOTES, 'UTF-8');

        // Validate and sanitize URL variables
        $variablesFromURL = [];
        foreach ($url as $key => $value) {
            $variablesFromURL[$key] = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
        }

        $this->routeController($page, $variablesFromURL);
    }


    protected function callView($page, $variables = array())
    {
        call_user_func_array(array($this, $page), (array)$variables);
    }


    private function minifyHTML($buffer)
    {
        $minified_HTML = new HtmlMin();
        $minified_HTML->doNotRemoveWhitespaceAroundTags(array('code'));
        return $minified_HTML->minify($buffer);
    }


    protected function render($page, array $variables = array())
    {
        // Make sure only one view can be called
        if (!empty($this->rendered_view)) {
            throw new \Exception("Page: '" . $page . "' can not be rendered because the framework has already rendered page: '" . $this->rendered_view . "'!");
        }
        else {
            $this->rendered_view = $page;
        }

        echo "<!-- Page Generated by Kristal Framework -->\n";

        // Include variables passed by the route function
        if (!empty($variables))
        {
            foreach ($variables as $key => $value)
            {
                ${$key} = $value;
            }
        }

        // Include metadata from config.php
        $kristal_metadata = unserialize(METADATA);

        // Minify HTML
        if (MINIFY_HTML)
        {
            ob_start(array($this, "minifyHTML"));
        }

        // Include essential page sections
        if (file_exists(page("layouts" . DIRECTORY_SEPARATOR . "header.php"))) include_once page("layouts" . DIRECTORY_SEPARATOR . "header.php");
        if (file_exists("app" . DIRECTORY_SEPARATOR . "Backend" . DIRECTORY_SEPARATOR . "Core" . DIRECTORY_SEPARATOR . "Helper" . DIRECTORY_SEPARATOR . "frameworkHelper.php") && DISPLAY_HELPER && MAINTENANCE_MODE && $_SESSION["maintenance_access_granted"]) include_once "app/Backend/Core/Helper/frameworkHelper.php";

        // Add PHP variables to be used by JavaScript
        PHPJS::addJSVariable([
            "production_mode" => (PRODUCTION_MODE ? "true" : "false"),
            "language" => (isset($_SESSION["translation_language"])) ? $_SESSION["translation_language"] : DEFAULT_LANGUAGE,
        ]);

        // Include blocks
        foreach (glob("app" . DIRECTORY_SEPARATOR . "Backend" . DIRECTORY_SEPARATOR . "Blocks" . DIRECTORY_SEPARATOR . "*.php") as $block)
        {
            if (file_exists($block)) include_once $block;
        }

        // Make sure page is a php file
        if (substr($page, -4) !== ".php")
        {
            $page .= ".php";
        }

        // Include the requested page
        if (file_exists(page($page))) include page($page);
        else if (file_exists(page("404.php"))) include page("404.php");

        // Render footer
        if (file_exists(page("layouts" . DIRECTORY_SEPARATOR . "footer.php"))) include_once page("layouts" . DIRECTORY_SEPARATOR . "footer.php");

        ob_end_flush();
    }
}